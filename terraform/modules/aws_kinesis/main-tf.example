data "aws_caller_identity" "current" {}
data "aws_partition" "current" {}
data "aws_region" "current" {}

data "aws_iam_policy_document" "firehose_assume_role" {
    statement {
        effect = "Allow"

        principals {
            type = "Service"
            identifiers = ["firehose.amazonaws.com"]
        }

        actions = ["sts:AssumeRole"]
    }
}

resource "aws_iam_role" "firehose" {
  name = "firehose_delivery_role"
  assume_role_policy = data.aws_iam_policy_document.firehose_assume_role.json

#   assume_role_policy = jsonencode({
#     Version = "2012-10-17",
#     Statement = [
#       {
#         Action = "sts:AssumeRole",
#         Effect = "Allow",
#         Principal = {
#           Service = "firehose.amazonaws.com"
#         }
#       }
#     ]
#   })
}

data "aws_iam_policy_document" "kinesis_attach_policies" {
    statement {
        effect = "Allow"
        resources = [aws_kinesis_stream.order_stream.arn]
        actions = [
            "kinesis:DescribeStream",
            "kinesis:GetShardIterator",
            "kinesis:GetRecords",
            "kinesis:ListShards"
        ]
    }
    statement {
        effect = "Allow"
        resources = [
            "arn:aws:s3:::${aws_s3_bucket.data_lake_name}/landing_zone/firehose_stream",
            "arn:aws:s3:::${aws_s3_bucket.data_lake_name}/landing_zone/firehose_stream/*",
            "arn:aws:s3:::${aws_s3_bucket.data_lake_name}/landing_zone/firehose_stream_errors",
            "arn:aws:s3:::${aws_s3_bucket.data_lake_name}/landing_zone/firehose_stream_errors/*"
        ]
        actions = [
            "s3:PutObject",
            "s3:PutObjectAcl"
        ]
    }
    statement {
        effect = "Allow"
        resources = ["*"]
        actions = ["logs:PutLogEvents"]
    }
}

resource "aws_iam_role_policy" "firehose_policy" {
  name = "firehose_access_policy"
  role = aws_iam_role.firehose.name

  policy = aws_iam_policy_document.kinesis_attach_policies.json

#   policy = jsonencode({
#     Version = "2012-10-17",
#     Statement = [
#       {
#         Effect = "Allow",
#         Action = [
#           "kinesis:DescribeStream",
#           "kinesis:GetShardIterator",
#           "kinesis:GetRecords",
#           "kinesis:ListShards"
#         ],
#         Resource = aws_kinesis_stream.order_stream.arn 
#       },
#       {
#         Effect = "Allow",
#         Action = [
#           "s3:PutObject",
#           "s3:PutObjectAcl"
#         ],
#         Resource = aws_s3_bucket.data_lake.arn
#       },
#       {
#         Effect = "Allow",
#         Action = [
#           "logs:PutLogEvents"
#         ],
#         Resource = "*"
#       }
#     ]
#   })
}


resource "aws_kinesis_stream" "order_stream" {
    name = var.kinesis_stream_name
    shard_count = 1

    shard_level_metrics = [
        "IncomingBytes",
        "OutgoingBytes",
    ]

    stream_mode_details {
        stream_mode = "PROVISIONED"
    }
}

resource "aws_s3_bucket" "data_lake" {
  bucket        = "test-bucket"
  force_destroy = true
}

# resource "aws_glue_catalog_database" "bronze" {
#   name = "bronze"
# }

# resource "aws_glue_catalog_table" "test" {
#   name          = "test"
#   database_name = aws_glue_catalog_database.bronze.name
#   parameters = {
#     format = "parquet"
#   }

#   table_type = "EXTERNAL_TABLE"

#   open_table_format_input {
#     iceberg_input {
#       metadata_operation = "CREATE"
#       version            = 2
#     }
#   }

#   storage_descriptor {
#     location = "s3://${aws_s3_bucket.data_lake.id}"

#     columns {
#       name = "my_column_1"
#       type = "int"
#     }
#   }
# }

resource "aws_kinesis_firehose_delivery_stream" "firehose_to_lake" {
    name = "kinesis_firehose_to_s3_from_stream"
    destination = "extended_s3"

    kinesis_source_configuration {
        kinesis_stream_arn = aws_kinesis_stream.order_stream.arn
        role_arn = aws_iam_role.firehose.arn
    }
    extended_s3_configuration {
        role_arn           = aws_iam_role.firehose.arn
        bucket_arn         = aws_s3_bucket.data_lake.arn
        compression_format = "UNCOMPRESSED"
        prefix = "landing_zone/firehose_stream/!{timestamp:yyyy/MM/dd}/"
        error_output_prefix = "landing_zone/firehose_stream_errors/!{timestamp:yyyy/MM/dd}/"
    }
}

# resource "aws_kinesis_firehose_delivery_stream" "test_stream" {
#   name        = "terraform-kinesis-firehose-test-stream"
#   destination = "iceberg"

#   kinesis_source_configuration {
#     kinesis_stream_arn = aws_kinesis_stream.order_stream.arn
#     role_arn = aws_iam_role.firehose.arn
#   }

#   iceberg_configuration {
#     role_arn           = aws_iam_role.firehose_role.arn
#     catalog_arn        = "arn:${data.aws_partition.current.partition}:glue:${data.aws_region.current.name}:${data.aws_caller_identity.current.account_id}:catalog"
#     buffering_size     = 10
#     buffering_interval = 400

#     s3_configuration {
#       role_arn   = aws_iam_role.firehose_role.arn
#       bucket_arn = aws_s3_bucket.data_lake.arn
#     }

#     destination_table_configuration {
#       database_name = aws_glue_catalog_database.test.name
#       table_name    = aws_glue_catalog_table.test.name
#     }

#     processing_configuration {
#       enabled = "true"

#       processors {
#         type = "Lambda"

#         parameters {
#           parameter_name  = "LambdaArn"
#           parameter_value = "${aws_lambda_function.lambda_processor.arn}:$LATEST"
#         }
#       }
#     }
#   }
# }