# Basic checks for linting, syntax errors, formatting, ...
# test TerraForm with
# - terraform validate
# - tflint
# - checkov

name: App CI/CD

on: 
  push:
    branches:
      - main

jobs:
  ruff-format:
      runs-on: ubuntu-latest
      steps:
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff
      
      - run: ruff format

  pylint:
    needs: [ruff-format]
    runs-on: ubuntu-latest

    steps:
    - name: checkout
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r src/webshop/requirements.txt
    
    - name: check-code
      run: |
        pylint $(git ls-files '*.py') --fail-under=7.5

  docker-hub:
    needs: [pylint, ruff-format]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4 
    
    - name: log-in-docker-hub
      uses: docker/login-action@v3
      with:
        username: ${{ vars.DOCKERHUB_USER }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build and push
      uses: docker/build-push-action@v6
      with:
        context: ./src/webshop/
        push: true
        tags: ${{ vars.DOCKERHUB_USER }}/webshop:latest

  # NOTE: working flow, disabled temporarily for development purposes
  # aws-ecr:
  #   needs: [pylint, ruff-format]
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v4 

  #   - name: authenticate-to-aws
  #     uses: aws-actions/configure-aws-credentials@v4
  #     with:
  #       aws-region: ${{ vars.TF_AWS_REGION }}
  #       aws-access-key-id: ${{ secrets.TF_AWS_ACCESS_KEY_ID }}
  #       aws-secret-access-key: ${{ secrets.TF_AWS_SECRET_ACCESS_KEY }}

  #   - name: Login to Amazon ECR
  #     id: login-ecr
  #     uses: aws-actions/amazon-ecr-login@v2

  #   - name: Build, tag, and push docker image to Amazon ECR
  #     env:
  #       REGISTRY: ${{ steps.login-ecr.outputs.registry }}
  #       REPOSITORY: webshop
  #       IMAGE_TAG: latest
  #     run: |
  #       docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG ./src/webshop/
  #       docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
    
        